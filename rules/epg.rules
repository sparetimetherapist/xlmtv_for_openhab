import java.io.File // You need to import this one for file-checking

// #############################################################
//                      Global EPG Settings
// #############################################################
//
// ----------------------- PREREQUISITES -----------------------
// 'Exec' Binding
// 'MAP' Transformation (including 'epg.map')
// 'xmltv' installed ('sudo apt-get install xmltv')
// 'epg_parser.py' in OH script-directory
// 
// 'JS' Transformation (for easier duration-calculation) [OPTIONAL]
// -------------------------------------------------------------
//
val xml_grabber = "tv_grab_eu_egon" // There may be a need to change the used grabber, depending on your region (this one is for EU channels)
val xml_path = "/etc/openhab2/html/epg/"
val script_path = "/etc/openhab2/scripts/"
//
// #############################################################

// -------------------------------------------------------------> START
//
//                      EPG Rule #1
//
// This rule crawls all the public available EPG-Sources based
// on the selection in your xmltv-config.
//
// This one requires internet-connection to execute!
//
// -------------------------------------------------------------
rule "EPG - Update 2-day forecast XMLTV-file"
when
    System started or // Execute on system startup...
    Time cron "0 3 0 * * ?" or // ... every night at 3 o'clock...
    Item EPG_Update received update 0 // ... and if another rule sends update '0' to 'EPG_Update'.
then
    // Define variables
    val epgConfig = new File(xml_path + "conf/epg_eu.conf")
    val epgSource = new File(xml_path + "data/epgsource.xml")

    // Abort if xmltv-config is missing
    if (epgConfig.isFile() == false || epgConfig.canRead() == false) {
        logError("EPG","EPG Error: Update/Initialization failed ('epg_eu.conf' is missing or can´t be accessed)")
        return
    }

    // Check if epgsource.xml is available...
    if (epgSource.isFile() && epgSource.canRead()) {
        val newdate = new DateTime(now().minusHours(12))
        val filedate = new DateTime(epgSource.lastModified())

        // Refresh epgsource.xml if it´s lastModified date is older>12h
        if(filedate.isBefore(newdate)) {
            logInfo("EPG","EPG: 'epgsource.xml' is available, but older than 12 hours - Starting update... ")
            executeCommandLine("sudo /usr/bin/" + xml_grabber + " --config-file " + xml_path + "conf/epg_eu.conf --days 2 --quiet --output " + xml_path + "data/epgsource.xml",5000)
            sendCommand(EPG_Update, 1) // continue with rule step #2
            return
        } else { return }
    } else {
        // Execute if epgsource.xml can´t be found or accessed.
        logInfo("EPG","EPG: 'epgsource.xml ' isn´t available or can´t be accessed - Fetching EPG-data...")
        executeCommandLine("sudo /usr/bin/" + xml_grabber + " --config-file " + xml_path + "conf/epg_eu.conf --days 2 --quiet --output " + xml_path + "data/epgsource.xml",5000)
        sendCommand(EPG_Update, 1) // continue with rule step #2
    }
end // -------------------------------------------------------------> END

// -------------------------------------------------------------> START
//
//                          EPG Rule #2
//
// This one minimizes the 'epgsource.xml' hourly, by creating
// another file for all shows running until NOW.
// 
// -------------------------------------------------------------
rule "EPG - Minimize XMLTV-file every hour"
when
    Time cron "0 0 * * * ?" or // Execute every hour...
    Item EPG_Update received update 1 // ... and if rule #1 sends a trigger
then
    // Check for 'epgsource.xml'
    val epgSource = new File(xml_path + "data/epgsource.xml") 
    if(epgSource.isFile() && epgSource.canRead()) { 

        // Extracts all shows running until NOW, depending on your local time
        executeCommandLine("sudo /usr/bin/tv_grep --on-after now --output " + xml_path + "data/epgsource_bynow.xml " + xml_path + "data/epgsource.xml",5000)
        sendCommand(EPG_Update, 2) // continue with rule #3 
        logInfo("EPG","EPG: 'epgsource.xml' successfully minimized.")
    } else {
        sendCommand(EPG_Update, 0) // if 'epgsource' wasn´t found - go back to rule #1...
        return
    }
end // -------------------------------------------------------------> END

// -------------------------------------------------------------> START
//
//                          EPG Rule #3
//
// Extract the current and next tv-shows for all selected
// channels from 'epgsource_bynow.xml'.
//
// -------------------------------------------------------------
rule "EPG - Get current and next tv-show from minimized XMLTV-file"
when
    Item EPG_Update received update 2 // Execute on update '2'
then
    // Check for 'epgsource_bynow.xml'
    val epgFiltered = new File(xml_path + "data/epgsource_bynow.xml")
    if(epgFiltered.isFile() && epgFiltered.canRead()) {

        // Split minimized xmltv-file into one for each channel
        executeCommandLine("sudo /usr/bin/tv_split --output " + xml_path + "data/%channel_bynow.xml " + xml_path + "data/epgsource_bynow.xml",5000) 

        gTVChannel.members.filter[ i | i.state != NULL ].forEach[ i |
            // Extract and transform channelID from item
            val chan = i.name.split("_").get(2).toString
            val channelId = transform("MAP", "epg.map", chan)

            // Query for current- and next-show infos
            val stop = executeCommandLine("sudo python " + script_path + "epg_parser.py -t " + xml_path + "data/" + channelId + "_bynow.xml -c get_stopextra",5000)
            executeCommandLine("sudo /usr/bin/tv_grep --on-after now --on-before now --output " + xml_path + "data/" + channelId + "_now.xml " + xml_path + "data/" + channelId + "_bynow.xml",5000)
            executeCommandLine("sudo /usr/bin/tv_grep --on-after " + stop + " --on-before " + stop + " --output " + xml_path + "data/" + channelId + "_next.xml " + xml_path + "data/" + channelId + "_bynow.xml",5000)
        ]

        // Continue to rule #4
        sendCommand(EPG_Update, 3) 
        return

    } else {
        logError("EPG", "EPG Error: Update failed ('epgsource_bynow.xml' is missing or can´t be accessed)" )
        sendCommand(EPG_Update, 1) // return to rule #2
        return
    }
end // -------------------------------------------------------------> END

// -------------------------------------------------------------> START
// 
//                          EPG Rule #4
//
// Extract all values from the *.xml-files and send them to 
// the corresponding openHAB-items.
//
// -------------------------------------------------------------
rule "EPG - Send updated infos to openHAB-items"
when
    Item EPG_Update received update 3 // Execute on update #3
then
    gTVChannel.members.forEach[ i |
        val room = i.name.split("_").get(0).toString
        val type = i.name.split("_").get(1).toString
        val chan = i.name.split("_").get(2).toString
        
        // Set variable item-names & transform values
        val currentShowTitleItem = room + "_" + type + "_" + chan + "_CurrentShow"
        val nextShowTitleItem = room + "_" + type + "_" + chan + "_NextShow"
        val currentShowStartTimeItem = room + "_" + type + "_" + chan + "_CurrentShowStartTime"
        val nextShowStartTimeItem = room + "_" + type + "_" + chan + "_NextShowStartTime"
        val currentShowStopTimeItem = room + "_" + type + "_" + chan + "_CurrentShowStopTime"
        val nextShowStopTimeItem = room + "_" + type + "_" + chan + "_NextShowStopTime"
        // val currentShowStartStopItem = room + "_" + type + "_" + chan + "_CurrentShowStartStop"
        val nextShowStartStopItem = room + "_" + type + "_" + chan + "_NextShowStartStop"
        // val logoURLItem = room + "_" + type + "_" + chan + "_LogoURL"
        val channelId = transform("MAP", "epg.map", chan)

        // Execute python-script
        val channelName = executeCommandLine("sudo python " + script_path + "epg_parser.py -t " + xml_path + "data/" + channelId + "_now.xml -c get_channelname",5000)
        val currentShowTitle = executeCommandLine("sudo python " + script_path + "epg_parser.py -t " + xml_path + "data/" + channelId + "_now.xml -c get_title",5000)
        val nextShowTitle = executeCommandLine("sudo python " + script_path + "epg_parser.py -t " + xml_path + "data/" + channelId + "_next.xml -c get_title",5000)
        val currentShowStartTime = executeCommandLine("sudo python " + script_path + "epg_parser.py -t " + xml_path + "data/" + channelId + "_now.xml -c get_starttime",5000)
        val nextShowStartTime = executeCommandLine("sudo python " + script_path + "epg_parser.py -t " + xml_path + "data/" + channelId + "_next.xml -c get_starttime",5000)
        val currentShowStopTime = executeCommandLine("sudo python " + script_path + "epg_parser.py -t " + xml_path + "data/" + channelId + "_now.xml -c get_stoptime",5000)
        val nextShowStopTime = executeCommandLine("sudo python " + script_path + "epg_parser.py -t " + xml_path + "data/" + channelId + "_next.xml -c get_stoptime",5000)
        // val currentShowStartStop = executeCommandLine("sudo python " + script_path + "epg_parser.py -t " + xml_path + "data/" + channelId + "_now.xml -c get_startstop",5000)
        val nextShowStartStop = executeCommandLine("sudo python " + script_path + "epg_parser.py -t " + xml_path + "data/" + channelId + "_next.xml -c get_startstop",5000)
        // val logoURL = executeCommandLine("sudo python " + script_path + "epg_parser.py -t " + xml_path + "data/" + channelId + "_now.xml -c get_logourl",5000)

        // Sending stuff to items
        sendCommand(i.name, channelName)
        sendCommand(currentShowTitleItem, currentShowTitle)
        sendCommand(nextShowTitleItem, nextShowTitle)
        if (currentShowStartTime != "" || currentShowStartTime != NULL) { sendCommand(currentShowStartTimeItem, currentShowStartTime.toString) }
        sendCommand(nextShowStartTimeItem, nextShowStartTime.toString)
        if (currentShowStopTime.toString != "" || currentShowStopTime.toString != NULL) { sendCommand(currentShowStopTimeItem, currentShowStopTime.toString) }
        sendCommand(nextShowStopTimeItem, nextShowStopTime.toString)
        // sendCommand(currentShowStartStopItem, currentShowStartStop.toString)
        sendCommand(nextShowStartStopItem, nextShowStartStop.toString)
        // sendCommand(logoURLItem, logoURL)
    ]

    // Calculate remaining show time for current runnning show
    gTVStopTime.members.forEach[ i |
        val currentShowDuration = i.name.split("_").get(0).toString+"_"+i.name.split("_").get(1).toString+"_"+i.name.split("_").get(2).toString+"_CurrentShowDuration"
        val oldDate = new DateTime((i.state as DateTimeType).calendar.timeInMillis).millis
        val newDate = new DateTime(now()).millis
        val duration = (((oldDate-newDate) / 1000) / 60)
        sendCommand(currentShowDuration, duration.toString)
    ]

    sendCommand(EPG_Update, 4) // Sending successfull value to update-item
    logInfo("EPG","EPG: openHAB-items succesfully updated! \u2713")
end // -------------------------------------------------------------> END

// -------------------------------------------------------------> START
//
//                          EPG Rule #5  
//
// This rule is very important to reduce the system calls to a
// minimum - it checks, if the stop-time of any of the current 
// running tv-shows is reached.
//
// -------------------------------------------------------------
rule "EPG - Check if an EPG update is needed"
when
    Time cron "0 0/1 * * * ?" // Execute every minute...
then
    // Check for 'epgsource_bynow.xml'
    val epgByNow = new File(xml_path + "data/epgsource_bynow.xml")
    if(epgByNow.isFile() && epgByNow.canRead()) { 

        // Calculate remaining show time for current runnning show
        gTVStopTime.members.forEach[ i |
            val currentShowDuration = i.name.split("_").get(0).toString+"_"+i.name.split("_").get(1).toString+"_"+i.name.split("_").get(2).toString+"_CurrentShowDuration"
            val oldDate = new DateTime((i.state as DateTimeType).calendar.timeInMillis).millis
            val newDate = new DateTime(now()).millis
            val duration = (((oldDate-newDate) / 1000) / 60)
            sendCommand(currentShowDuration, duration.toString)
        ]

        // Get timetsamp of the show with the earliest stoptime
        val stopTime = executeCommandLine("sudo python " + script_path + "epg_parser.py -t " + xml_path + "data/epgsource_bynow.xml -c get_stopextra",5000) 
        val DateTimeType timestamp = DateTimeType.valueOf(stopTime) // Convert human readable time stamp to DateTimeType

        // Compare current time with earliest stopDate of the current running shows
        if (now.isAfter(new DateTime(timestamp.zonedDateTime.toInstant.toEpochMilli)) ) { 
            executeCommandLine("sudo /usr/bin/tv_grep --on-after now --output " + xml_path + "data/epgsource_bynow.xml " + xml_path + "data/epgsource.xml",5000) // Update 'epgsource_bynow.xml'
            sendCommand(EPG_Update, 2) // execute rule #2
            logInfo("EPG", "EPG: A TV-show has ended. Starting update...")
        } else { return }
    } else {
        logError("EPG", "EPG Error: Update failed ('epgsource_bynow.xml' is missing or can´t be accessed)" )
        sendCommand(EPG_Update, 1) // return to rule #2
        return
    }
end // -------------------------------------------------------------> END
